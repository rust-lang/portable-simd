rd_("CiProduces a vector where every element has the natural \xe2\x80\xa6BbNumber of elements in this vector.CjProduces a vector where every element has the absolute \xe2\x80\xa6CgLanewise absolute value, implemented in Rust. Every \xe2\x80\xa6CiReturns true if all elements are set, or false otherwise.CgReturns true if any element is set, or false otherwise.BjTraits for comparing and ordering vectors.CkProduces a vector where every element has the cosine of \xe2\x80\xa6CmProduces a vector where every element has the exponential \xe2\x80\xa6EeA <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:CcReturns the number of elements in this SIMD vector.CkProduces a vector where every element has the logarithm \xe2\x80\xa6BiTraits for vectors with numeric elements.AoTraits for vectors of pointers.BhSets the value of the specified element.CmProduces a vector where every element has the sine of the \xe2\x80\xa6BlBit representation of this SIMD vector type.BlA SIMD vector with a different element type.00CiThe mask element type corresponding to this element type.BjThe mask type returned by each comparison.CfMask type used for manipulating this SIMD vector type.000DhA SIMD vector mask for <code>N</code> elements of width specified by \xe2\x80\xa6DjA SIMD vector with the shape of <code>[T; N]</code> but the operations \xe2\x80\xa6BnGets the \xe2\x80\x9caddress\xe2\x80\x9d portion of the pointer.0CfConverts the mask to a mask of any other element size.BcCasts to a pointer of another type.0CfPerforms elementwise conversion of this vector\xe2\x80\x99s \xe2\x80\xa600CnReturns the smallest integer greater than or equal to each \xe2\x80\xa6CmProduces a vector where every element has the exponential \xe2\x80\xa6AoReturns the argument unchanged.000CgA SIMD vector with one element of type <code>i8</code>.ChA SIMD vector with two elements of type <code>i8</code>.CiA SIMD vector with four elements of type <code>i8</code>.CjA SIMD vector with eight elements of type <code>i8</code>.BaCalls <code>U::from(self)</code>.000ChProduces a vector where every element has the base-2 \xe2\x80\xa6AePortable SIMD module.CmProduces a vector where every element has the square root \xe2\x80\xa6BiTests the value of the specified element.CgA SIMD vector with one element of type <code>u8</code>.ChA SIMD vector with two elements of type <code>u8</code>.CiA SIMD vector with four elements of type <code>u8</code>.CjA SIMD vector with eight elements of type <code>u8</code>.BbThis type, reinterpreted as bytes.CkMap from the elements of the input vector to the output \xe2\x80\xa6CnVector of <code>isize</code> with the same number of elements.0CnVector of <code>usize</code> with the same number of elements.0AnGeneric-length array strategy.BiCompare numeric types by exact bit value.ChA SIMD vector with one element of type <code>f32</code>.CiA SIMD vector with two elements of type <code>f32</code>.CjA SIMD vector with four elements of type <code>f32</code>.CkA SIMD vector with eight elements of type <code>f32</code>.ChA SIMD vector with one element of type <code>f64</code>.CiA SIMD vector with two elements of type <code>f64</code>.CjA SIMD vector with four elements of type <code>f64</code>.CkA SIMD vector with eight elements of type <code>f64</code>.CkReturns the largest integer value less than or equal to \xe2\x80\xa6CmReturns the floating point\xe2\x80\x99s fractional value, with its \xe2\x80\xa6ChA SIMD vector with one element of type <code>i16</code>.CiA SIMD vector with two elements of type <code>i16</code>.CjA SIMD vector with four elements of type <code>i16</code>.CkA SIMD vector with eight elements of type <code>i16</code>.ChA SIMD vector with one element of type <code>i32</code>.CiA SIMD vector with two elements of type <code>i32</code>.CjA SIMD vector with four elements of type <code>i32</code>.CkA SIMD vector with eight elements of type <code>i32</code>.ChA SIMD vector with one element of type <code>i64</code>.CiA SIMD vector with two elements of type <code>i64</code>.CjA SIMD vector with four elements of type <code>i64</code>.CkA SIMD vector with eight elements of type <code>i64</code>.CgA SIMD vector with 16 elements of type <code>i8</code>.CgA SIMD vector with 32 elements of type <code>i8</code>.CgA SIMD vector with 64 elements of type <code>i8</code>.CiProduces a vector where every element has the base-10 \xe2\x80\xa6DaTakes the reciprocal (inverse) of each element, <code>1/x</code>.CjRounds to the nearest integer value. Ties round toward \xe2\x80\xa6CjConstructs a mask by setting all elements to the given \xe2\x80\xa6CmConstructs a new SIMD vector with all elements set to the \xe2\x80\xa6CjReturns the floating point\xe2\x80\x99s integer value, with its \xe2\x80\xa6ChA SIMD vector with one element of type <code>u16</code>.CiA SIMD vector with two elements of type <code>u16</code>.CjA SIMD vector with four elements of type <code>u16</code>.CkA SIMD vector with eight elements of type <code>u16</code>.ChA SIMD vector with one element of type <code>u32</code>.CiA SIMD vector with two elements of type <code>u32</code>.CjA SIMD vector with four elements of type <code>u32</code>.CkA SIMD vector with eight elements of type <code>u32</code>.ChA SIMD vector with one element of type <code>u64</code>.CiA SIMD vector with two elements of type <code>u64</code>.CjA SIMD vector with four elements of type <code>u64</code>.CkA SIMD vector with eight elements of type <code>u64</code>.CgA SIMD vector with 16 elements of type <code>u8</code>.CgA SIMD vector with 32 elements of type <code>u8</code>.CgA SIMD vector with 64 elements of type <code>u8</code>.BlVector of mutable pointers to the same type.BoScalar type contained by this SIMD vector type.00BnChoose elements from two vectors using a mask.ChA SIMD vector with 16 elements of type <code>f32</code>.ChA SIMD vector with 32 elements of type <code>f32</code>.ChA SIMD vector with 64 elements of type <code>f32</code>.ChA SIMD vector with 16 elements of type <code>f64</code>.ChA SIMD vector with 32 elements of type <code>f64</code>.ChA SIMD vector with 64 elements of type <code>f64</code>.ChA SIMD vector with 16 elements of type <code>i16</code>.ChA SIMD vector with 32 elements of type <code>i16</code>.ChA SIMD vector with 64 elements of type <code>i16</code>.ChA SIMD vector with 16 elements of type <code>i32</code>.ChA SIMD vector with 32 elements of type <code>i32</code>.ChA SIMD vector with 64 elements of type <code>i32</code>.ChA SIMD vector with 16 elements of type <code>i64</code>.ChA SIMD vector with 32 elements of type <code>i64</code>.ChA SIMD vector with 64 elements of type <code>i64</code>.CoReturns true for each element if its value is <code>NaN</code>.nResize a mask.A`Resize a vector.oChoose elementsCkReplaces each element with a number that represents its \xe2\x80\xa6CfReturns numbers representing the sign of each element.BjTest a function that takes a single value.BfTest a function that takes two values.0ChA SIMD vector with 16 elements of type <code>u16</code>.ChA SIMD vector with 32 elements of type <code>u16</code>.ChA SIMD vector with 64 elements of type <code>u16</code>.ChA SIMD vector with 16 elements of type <code>u32</code>.ChA SIMD vector with 32 elements of type <code>u32</code>.ChA SIMD vector with 64 elements of type <code>u32</code>.ChA SIMD vector with 16 elements of type <code>u64</code>.ChA SIMD vector with 32 elements of type <code>u64</code>.ChA SIMD vector with 64 elements of type <code>u64</code>.CjVector of const pointers with the same number of elements.0BnOperations on SIMD vectors of signed integers.AjParallel <code>Ord</code>.CeCreates a vector from the elements of another vector.BiConverts SIMD vectors to vectors of bytesBeExtract a vector from another vector.0ChReturns <code>true</code> for each element that is null.0CjA SIMD vector with one element of type <code>isize</code>.CkA SIMD vector with two elements of type <code>isize</code>.ClA SIMD vector with four elements of type <code>isize</code>.CmA SIMD vector with eight elements of type <code>isize</code>.DkReads contiguous elements from <code>slice</code>. Elements are read so \xe2\x80\xa6CgA SIMD mask with one element for vectors with 8-bit \xe2\x80\xa6ChA SIMD mask with two elements for vectors with 8-bit \xe2\x80\xa6CiA SIMD mask with four elements for vectors with 8-bit \xe2\x80\xa6CjA SIMD mask with eight elements for vectors with 8-bit \xe2\x80\xa6DhElementwise fused multiply-add. Computes <code>(self * a) + b</code> \xe2\x80\xa6AjThe portable SIMD prelude.BnReverse the order of the elements in the mask.C`Reverse the order of the elements in the vector.CeWrites the values in a SIMD vector to potentially \xe2\x80\xa6CnTest if each element is equal to the corresponding element \xe2\x80\xa6ChTest if each element is greater than or equal to the \xe2\x80\xa6CjTest if each element is greater than the corresponding \xe2\x80\xa6CeTest if each element is less than or equal to the \xe2\x80\xa6CgTest if each element is less than the corresponding \xe2\x80\xa6CjTest if each element is not equal to the corresponding \xe2\x80\xa6CnCreates a new vector from the elements of <code>vector</code>.0CmRaw transmutation to an unsigned integer vector type with \xe2\x80\xa6CfConverts the mask to a vector of integers, where 0 \xe2\x80\xa6CjA SIMD vector with one element of type <code>usize</code>.CkA SIMD vector with two elements of type <code>usize</code>.ClA SIMD vector with four elements of type <code>usize</code>.CmA SIMD vector with eight elements of type <code>usize</code>.BmVector of constant pointers to the same type.DkSupporting trait for <code>Simd::cast</code>.  Typically doesn\xe2\x80\x99t need \xe2\x80\xa6C`Operations on SIMD vectors of unsigned integers.CnThis trait provides a possibly-temporary implementation of \xe2\x80\xa6ClA SIMD vector of unsigned integers with the same element \xe2\x80\xa6CkLanewise absolute difference. Every element becomes the \xe2\x80\xa60BdCompare numeric types approximately.CiReturns an array reference containing the entire SIMD \xe2\x80\xa6BlChanges constness without changing the type.DhReturns each element with the magnitude of <code>self</code> and the \xe2\x80\xa6CjA SIMD vector with 16 elements of type <code>isize</code>.CjA SIMD vector with 32 elements of type <code>isize</code>.CjA SIMD vector with 64 elements of type <code>isize</code>.ChA SIMD mask with one element for vectors with 16-bit \xe2\x80\xa6CiA SIMD mask with two elements for vectors with 16-bit \xe2\x80\xa6CjA SIMD mask with four elements for vectors with 16-bit \xe2\x80\xa6CkA SIMD mask with eight elements for vectors with 16-bit \xe2\x80\xa6ChA SIMD mask with one element for vectors with 32-bit \xe2\x80\xa6CiA SIMD mask with two elements for vectors with 32-bit \xe2\x80\xa6CjA SIMD mask with four elements for vectors with 32-bit \xe2\x80\xa6CkA SIMD mask with eight elements for vectors with 32-bit \xe2\x80\xa6ChA SIMD mask with one element for vectors with 64-bit \xe2\x80\xa6CiA SIMD mask with two elements for vectors with 64-bit \xe2\x80\xa6CjA SIMD mask with four elements for vectors with 64-bit \xe2\x80\xa6CkA SIMD mask with eight elements for vectors with 64-bit \xe2\x80\xa6CgA SIMD mask with 16 elements for vectors with 8-bit \xe2\x80\xa6CgA SIMD mask with 32 elements for vectors with 8-bit \xe2\x80\xa6CgA SIMD mask with 64 elements for vectors with 8-bit \xe2\x80\xa6CiReturns the element-wise maximum with <code>other</code>.BdReturns the maximum of each element.CiReturns the element-wise minimum with <code>other</code>.BdReturns the minimum of each element.BjConverts a SIMD mask to an array of bools.BcConverts a SIMD vector to an array.CjA SIMD vector with 16 elements of type <code>usize</code>.CjA SIMD vector with 32 elements of type <code>usize</code>.CjA SIMD vector with 64 elements of type <code>usize</code>.BeOperations on SIMD vectors of floats.AePortable SIMD module.BiFinds the index of the first set element.CjRaw transmutation from an unsigned integer vector type \xe2\x80\xa6CdConverts a vector of integers to a mask, where 0 \xe2\x80\xa6DiReads from potentially discontiguous indices in <code>slice</code> to \xe2\x80\xa6CiReturns true for each element if its value is neither \xe2\x80\xa60ChA SIMD mask with 16 elements for vectors with 16-bit \xe2\x80\xa6ChA SIMD mask with 32 elements for vectors with 16-bit \xe2\x80\xa6ChA SIMD mask with 64 elements for vectors with 16-bit \xe2\x80\xa6ChA SIMD mask with 16 elements for vectors with 32-bit \xe2\x80\xa6ChA SIMD mask with 32 elements for vectors with 32-bit \xe2\x80\xa6ChA SIMD mask with 64 elements for vectors with 32-bit \xe2\x80\xa6ChA SIMD mask with 16 elements for vectors with 64-bit \xe2\x80\xa6ChA SIMD mask with 32 elements for vectors with 64-bit \xe2\x80\xa6ChA SIMD mask with 64 elements for vectors with 64-bit \xe2\x80\xa6CfReturns the cumulative bitwise \xe2\x80\x9cor\xe2\x80\x9d across the \xe2\x80\xa60BmCreates a new pointer with the given address.0BoOperations on SIMD vectors of mutable pointers.BlChanges constness without changing the type.CnReturns the number of ones in the binary representation of \xe2\x80\xa60BjConverts an array of bools to a SIMD mask.BcConverts an array to a SIMD vector.DeConverts a slice to a SIMD vector containing <code>slice[..N]</code>.CcReads elementwise from pointers into a SIMD vector.AeInterleave two masks.AgInterleave two vectors.CaA SIMD mask with one element for vectors with \xe2\x80\xa6CbA SIMD mask with two elements for vectors with \xe2\x80\xa6CcA SIMD mask with four elements for vectors with \xe2\x80\xa6CdA SIMD mask with eight elements for vectors with \xe2\x80\xa6CgReturns the cumulative bitwise \xe2\x80\x9cand\xe2\x80\x9d across the \xe2\x80\xa60BjReturns the maximum element in the vector.00BjReturns the minimum element in the vector.00BnReturns the sum of the elements of the vector.CgReturns the sum of the elements of the vector, with \xe2\x80\xa60CgReturns the cumulative bitwise \xe2\x80\x9cxor\xe2\x80\x9d across the \xe2\x80\xa60BlRestrict each element to a certain interval.ClRestrict each element to a certain interval unless it is \xe2\x80\xa6BhReverses the byte order of each element.0ClExpand a const-generic test into separate tests for each \xe2\x80\xa6AnCreates a bitmask from a mask.BnConverts each element from radians to degrees.BnConverts each element from degrees to radians.ChMarker trait for types that may be used as SIMD mask \xe2\x80\xa6CjMarker trait for types that may be used as SIMD vector \xe2\x80\xa6ClReturns the number of zeros in the binary representation \xe2\x80\xa60CjReturns true for each element if its value is positive \xe2\x80\xa6CmReturns true for each negative element and false if it is \xe2\x80\xa6CmReturns true for each positive element and false if it is \xe2\x80\xa6DkReads contiguous elements from <code>slice</code>. Each element is read \xe2\x80\xa6CaA SIMD mask with 16 elements for vectors with \xe2\x80\xa6CaA SIMD mask with 32 elements for vectors with \xe2\x80\xa6CaA SIMD mask with 64 elements for vectors with \xe2\x80\xa6BoWrites pointers elementwise into a SIMD vector.ClSwizzle a vector of bytes according to the index vector. \xe2\x80\xa6CjReturns the memory representation of this integer as a \xe2\x80\xa600C`Operations on SIMD vectors of constant pointers.CkReturns a mutable array reference containing the entire \xe2\x80\xa6AgDeinterleave two masks.AiDeinterleave two vectors.AnCreates a mask from a bitmask.ChReturns true for each element if its value is subnormal.CdReturns the number of leading ones in the binary \xe2\x80\xa60CjReverses the order of bits in each elemnent. The least \xe2\x80\xa60CiConstructs a new SIMD vector by copying elements from \xe2\x80\xa6DfConditionally write contiguous elements to <code>slice</code>. The \xe2\x80\xa6CjCreates a new mask from the elements of <code>mask</code>.0CgCalculates the offset from a pointer using wrapping \xe2\x80\xa60AbWrapping negation.11B`Parallel <code>PartialEq</code>.DeWrites a SIMD vector to the first <code>N</code> elements of a slice.CnCreates an integer value from its representation as a byte \xe2\x80\xa60CiCreates a native endian integer value from its memory \xe2\x80\xa6DhReads from indices in <code>slice</code> to construct a SIMD vector. \xe2\x80\xa6CeReturns the number of leading zeros in the binary \xe2\x80\xa60BhSets the value of the specified element.CeReturns the number of trailing ones in the binary \xe2\x80\xa60BaParallel <code>PartialOrd</code>.EeCreates a new vector from the elements of <code>first</code> and <code>second</code>.0CnReducing multiply.  Returns the product of the elements of \xe2\x80\xa6CkReturns the product of the elements of the vector, with \xe2\x80\xa60ClLanewise saturating absolute value, implemented in Rust. \xe2\x80\xa6AhLanewise saturating add.0CiLanewise saturating negation, implemented in Rust. As \xe2\x80\xa6AmLanewise saturating subtract.0ClWrites values from a SIMD vector to multiple potentially \xe2\x80\xa6BiTests the value of the specified element.CfReturns the number of trailing zeros in the binary \xe2\x80\xa60CbSpecifies the default strategy for testing a type.DkReads contiguous elements from <code>slice</code>. Elements are read so \xe2\x80\xa6DkReads contiguous elements starting at <code>ptr</code>. Each element is \xe2\x80\xa6CgCalculates the offset from a pointer using wrapping \xe2\x80\xa60ClReturns true for each element if it has a negative sign, \xe2\x80\xa6ClReturns true for each element if it has a positive sign, \xe2\x80\xa6DkConditionally write contiguous elements starting from <code>ptr</code>. \xe2\x80\xa6DjExpand a const-generic <code>#[should_panic]</code> test into separate \xe2\x80\xa6CmRounds toward zero and converts to the same-width integer \xe2\x80\xa6ChExposes the \xe2\x80\x9cprovenance\xe2\x80\x9d part of the pointer for \xe2\x80\xa60DkReads from indices in <code>slice</code> to construct a SIMD vector. If \xe2\x80\xa6ClConditionally read elementwise from pointers into a SIMD \xe2\x80\xa6ChConditionally write pointers elementwise into a SIMD \xe2\x80\xa6CjConverts an address to a pointer without giving it any \xe2\x80\xa60EcCreates a new mask from the elements of <code>first</code> and <code>second</code>.0CdConverts a vector of integers to a mask, where 0 \xe2\x80\xa6DkShifts the mask elements to the left by <code>OFFSET</code>, filling in \xe2\x80\xa6DjShifts the vector elements to the left by <code>OFFSET</code>, filling \xe2\x80\xa6DhRotates the mask such that the first <code>OFFSET</code> elements of \xe2\x80\xa6DjRotates the vector such that the first <code>OFFSET</code> elements of \xe2\x80\xa6DiShifts the mask elements to the right by <code>OFFSET</code>, filling \xe2\x80\xa6DkShifts the vector elements to the right by <code>OFFSET</code>, filling \xe2\x80\xa6DkReads contiguous elements from <code>slice</code>. Each element is read \xe2\x80\xa6DiRotates the mask such that the first <code>self.len() - OFFSET</code> \xe2\x80\xa6DkRotates the vector such that the first <code>self.len() - OFFSET</code> \xe2\x80\xa62DfConditionally write contiguous elements to <code>slice</code>. The \xe2\x80\xa6CgTest a unary vector function against a unary scalar \xe2\x80\xa6DhReads from indices in <code>slice</code> to construct a SIMD vector. \xe2\x80\xa6CiTest a binary vector function against a binary scalar \xe2\x80\xa6CgConverts an address back to a pointer, picking up a \xe2\x80\xa60ClWrites values from a SIMD vector to multiple potentially \xe2\x80\xa6CkTest a ternary vector function against a ternary scalar \xe2\x80\xa65553CiTest a binary vector-scalar function against a binary \xe2\x80\xa6064")